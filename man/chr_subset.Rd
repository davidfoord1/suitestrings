% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vector-pattern-matching.R
\name{chr_subset}
\alias{chr_subset}
\title{Get matching elements}
\usage{
chr_subset(strings, pattern, fixed = FALSE)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{pattern}{A single character string to be searched for in each element of \code{strings}.
By default, \code{pattern} is interpreted as a regular expression (regex). If the \code{fixed} argument is set to \code{TRUE},
\code{pattern} will be treated as a literal string to be matched exactly.}

\item{fixed}{Logical; whether \code{pattern} should be matched exactly,
treating regex special characters as regular  string characters. Default \code{FALSE}.}
}
\value{
A character vector containing only the elements of \code{strings} that match the specified \code{pattern}. If no matches are found, an empty character vector is returned.
}
\description{
\code{chr_subset} returns a subset of the input character vector, containing only the elements that match a specified pattern.
}
\details{
These functions are built using the base R regular expression functions.
\code{{suitestrings}} uses Perl-compatible Regular Expressions (PCRE).
This is achieved by setting \code{perl = TRUE} in the underlying base functions.
See R's \link{regexp} documentation for info on the regex implementation.
For complete syntax details see \href{https://www.pcre.org/current/doc/html/}{https://www.pcre.org/current/doc/html/}
}
\examples{
chr_subset(c("apple", "banana", "cherry", "date"), "a")
#> [1] "apple" "banana" "date"
chr_subset(c("apple", "banana", "cherry", "date"), "^a")
#> [1] "apple"

}
