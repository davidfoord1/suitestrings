% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string-concatenation.R
\name{str_glue}
\alias{str_glue}
\title{Evaluate R code in strings}
\usage{
str_glue(..., separator = "", envir = parent.frame())
}
\arguments{
\item{separator}{A character string to separate the concatenated elements. Defaults to an empty string,
which results in no separation between elements.'}

\item{envir}{Environment to evaluate the expression in. By default this is the environment
\code{str_glue()} was called from.}

\item{strings}{A character vector, where each element of the vector is a character string.}
}
\value{
A character vector with same length as the longest input.
}
\description{
Evaluate R code in strings
}
\examples{
tri_num_str <- function(n) chr_collapse(cumsum(seq(n)), ", ")
n <- 5

# Evaluate R expressions in braces {} in the middle of a string
str_glue("The first {n} triangle numbers are {tri_num_str(n)}.")
#> [1] "The first 5 triangle numbers are 1, 3, 6, 10, 15."

# Supply variables as named arguments
str_glue(
   "My name is {name}, ",
   "I am {age} years old. ",
   "In {n} years I'll be {age + n}.",
   name = "John",
   age = 45
)
#> [1] "My name is John, I am 45 years old. In 5 years I'll be 50."
}
\seealso{
\code{\link[=str_concat]{str_concat()}} for combining strings without evaluation.

\code{\link[=chr_collapse]{chr_collapse()}} for strings in character vectors to a single string.

\code{\link[=sprintf]{sprintf()}} for C-style string formatting
}
