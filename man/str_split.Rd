% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string-pattern-matching.R,
%   R/vector-pattern-matching.R
\name{str_split_all}
\alias{str_split_all}
\alias{str_split_first}
\alias{str_split_nth}
\alias{str_split_last}
\alias{chr_split_all}
\title{Split strings by a pattern}
\usage{
str_split_all(strings, pattern, fixed = FALSE)

str_split_first(strings, pattern, fixed = FALSE)

str_split_nth(strings, pattern, n, fixed = FALSE)

str_split_last(strings, pattern, fixed = FALSE)

chr_split_all(strings, pattern, fixed = FALSE)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{pattern}{A single character string to be searched for in each element of \code{strings}.
By default, \code{pattern} is interpreted as a regular expression (regex). If the \code{fixed} argument is set to \code{TRUE},
\code{pattern} will be treated as a literal string to be matched exactly.}

\item{fixed}{Logical; whether \code{pattern} should be matched exactly,
treating regex special characters as regular  string characters. Default \code{FALSE}.}

\item{n}{(\code{str_split_nth} only) Integer, the index of substring to extract
from a split string. Negative values count back from the end.}
}
\value{
\code{str_split_first()}, \code{str_split_nth()} and \code{str_split_last()}:
A character vector the same length as \code{strings},
with each element being the first, nth or last substring obtained
by splitting the corresponding element of \code{strings}.

\code{str_split_all()}: A list of the same length as \code{strings},
with each element being a character vector of substrings obtained by
splitting the corresponding element of \code{strings}.

\code{chr_split_all()}: A single character vector containing all substrings
obtained by splitting each element of \code{strings}. Equivalent of
using \code{unlist()} on the output of \code{str_split_all()}.
}
\description{
\code{str_split_first()}, \code{str_split_nth()} and \code{str_split_last()}:
take the first, nth and last result of splitting each string in
the input vector based on a pattern delimiter.

\code{str_split_all()} splits each string in the input vector into substrings
based on a pattern.

\code{chr_split_all()} splits all strings in the input vector and
returns the substrings in a single character vector.
}
\details{
These functions are built using the base R regular expression functions.
\code{{suitestrings}} uses Perl-compatible Regular Expressions (PCRE).
This is achieved by setting \code{perl = TRUE} in the underlying base functions.
See R's \link{regexp} documentation for info on the regex implementation.
For complete syntax details see \href{https://www.pcre.org/current/doc/html/}{https://www.pcre.org/current/doc/html/}
}
\examples{

str_split_first(c("one,two,three", "abc,def,ghi"), ",")
#> [1] "one" "abc"
str_split_nth(c("one,two,three", "abc,def,ghi"), ",", 2)
#> [1] "two" "def"
str_split_last(c("one,two,three", "abc,def,ghi"), ",")
#> [1] "three" "ghi"

str_split_all(c("one,two,three", "abc,def,ghi"), ",")
#> [[1]]
#> [1] "one"   "two"   "three"
#>
#> [[2]]
#> [1] "abc" "def" "ghi"
chr_split_all(c("one,two,three", "abc,def,ghi"), ",")
#> [1] "one"   "two"   "three" "abc"   "def"   "ghi"

}
\seealso{
\code{\link[=strsplit]{strsplit()}} which these functions wrap around.
}
