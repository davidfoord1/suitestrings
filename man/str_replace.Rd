% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string-pattern-matching.R
\name{str_replace_first}
\alias{str_replace_first}
\alias{str_replace_all}
\title{Replace parts of a string with new text.}
\usage{
str_replace_first(strings, pattern, replacement, fixed = FALSE)

str_replace_all(strings, pattern, replacement, fixed = FALSE)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{pattern}{A single character string to be searched for in each element of \code{strings}.
By default, \code{pattern} is interpreted as a regular expression (regex). If the \code{fixed} argument is set to \code{TRUE},
\code{pattern} will be treated as a literal string to be matched exactly.}

\item{replacement}{A single string containing the text to replace the pattern with.}

\item{fixed}{Logical; whether \code{pattern} should be matched exactly,
treating regex special characters as regular  string characters. Default \code{FALSE}.}
}
\value{
\code{str_replace()} Returns an altered character vector of equal length to \code{strings},
with the first match in each string replaced.

\code{str_replace_all()} Returns an altered character vector of equal length to \code{strings},
with every match in each string replaced. Regular expression matches are non-overlapping.
}
\description{
Replace parts of a string with new text.
}
\examples{
str_replace_first("Hello world!", "o", "ooo")
#> [1] "Hellooo world!"

str_replace_all("Hello world!", "o", "ooo")
#> [1] "Hellooo wooorld!"

}
