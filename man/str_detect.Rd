% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string-pattern-matching.R,
%   R/vector-pattern-matching.R
\name{str_detect}
\alias{str_detect}
\alias{str_detect_starts_with}
\alias{str_detect_ends_with}
\alias{chr_detect_any}
\alias{chr_detect_all}
\title{Detect the presence of a pattern in a string}
\usage{
str_detect(strings, pattern, fixed = FALSE)

str_detect_starts_with(strings, pattern, fixed = FALSE)

str_detect_ends_with(strings, pattern, fixed = FALSE)

chr_detect_any(strings, pattern, fixed = FALSE)

chr_detect_all(strings, pattern, fixed = FALSE)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{pattern}{A single character string to be searched for in each element of \code{strings}.
By default, \code{pattern} is interpreted as a regular expression (regex). If the \code{fixed} argument is set to \code{TRUE},
\code{pattern} will be treated as a literal string to be matched exactly.}

\item{fixed}{Logical; whether \code{pattern} should be matched exactly,
treating regex special characters as regular  string characters. Default \code{FALSE}.}
}
\value{
\code{str_detect()}:
A logical vector equal in length to \code{strings}, indicating whether
the pattern has been found in each of the strings.

\code{str_detect_starts_with()} and \code{str_detect_ends_with()}:
A logical vector equal in length to \code{strings}, indicating whether
the pattern has been found at the start-of or end-of each strings,
respectively.

\code{chr_detect_any()}:
A single logical value for whether the pattern occurs anywhere in
a character vector.

\code{chr_detect_all()}:
A single logical value for whether the pattern occurs in every
element of a character vector.

A logical vector indicating the presence of each pattern in a string.
}
\description{
These functions search for patterns in strings
}
\details{
These functions are built using the base R regular expression functions.
\code{{suitestrings}} uses Perl-compatible Regular Expressions (PCRE).
This is achieved by setting \code{perl = TRUE} in the underlying base functions.
See R's \link{regexp} documentation for info on the regex implementation.
For complete syntax details see \href{https://www.pcre.org/current/doc/html/}{https://www.pcre.org/current/doc/html/}
}
\examples{
strings <- c("apple", "banana", "cherry")

str_detect(strings, "a")
#> [1]  TRUE  TRUE FALSE
str_detect_starts_with(strings, "a")
#> [1]  TRUE FALSE FALSE
str_detect_ends_with(strings, "a")
#> [1] FALSE  TRUE FALSE

chr_detect_any(strings, "a")
#> [1] TRUE
chr_detect_all(strings, "a")
#> [1] FALSE
}
\seealso{
\code{\link[=grepl]{grepl()}} which these functions wrap around.
}
