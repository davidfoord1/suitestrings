% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/string-pattern-matching.R
\name{str_locate_first}
\alias{str_locate_first}
\alias{str_locate_all}
\title{Locate pattern matches in strings}
\usage{
str_locate_first(strings, pattern, fixed = FALSE)

str_locate_all(strings, pattern, fixed = FALSE)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{pattern}{A single character string to be searched for in each element of \code{strings}.
By default, \code{pattern} is interpreted as a regular expression (regex). If the \code{fixed} argument is set to \code{TRUE},
\code{pattern} will be treated as a literal string to be matched exactly.}

\item{fixed}{Logical; whether \code{pattern} should be matched exactly,
treating regex special characters as regular  string characters. Default \code{FALSE}.}
}
\value{
\code{str_locate_first()} returns a two-column matrix with the start and end positions
of the first match. There is a row for each string. \code{str_locate_all()} returns a list of matrices.
There is a matrix for each string and a row for each match.
If no match is found, NA values are returned.
}
\description{
These functions find occurrences of a pattern in strings.

\code{str_locate_first()} finds the first occurrence of a pattern in a string.
\code{str_locate_all()} finds all occurrences of a pattern in each string of the input vector.
}
\details{
These functions are built using the base R regular expression functions.
\code{{suitestrings}} uses Perl-compatible Regular Expressions (PCRE).
This is achieved by setting \code{perl = TRUE} in the underlying base functions.
See R's \link{regexp} documentation for info on the regex implementation.
For complete syntax details see \href{https://www.pcre.org/current/doc/html/}{https://www.pcre.org/current/doc/html/}
}
\examples{
str_locate_first("Hello world", "world")
#>      start end
#> [1,]     7  11
str_locate_first(c("Hello world", "Goodbye world"), "o")
#>      start end
#> [1,]     5   5
#> [2,]     2   2

str_locate_all(c("Hello world", "Goodbye world"), "world")
#> [[1]]
#>      start end
#> [1,]     7  11
#>
#> [[2]]
#>      start end
#> [1,]     9  13
str_locate_all(c("Hello world", "Goodbye world"), "o")
#> [[1]]
#> start end
#> [1,]     5   5
#> [2,]     8   8
#>
#> [[2]]
#> start end
#> [1,]     2   2
#> [2,]     3   3
#> [3,]    10  10

}
