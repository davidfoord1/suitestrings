% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vector-organisation.R
\name{chr_sort}
\alias{chr_sort}
\alias{chr_order}
\alias{chr_rank}
\title{Re-organise a character vector}
\usage{
chr_sort(strings)

chr_order(strings)

chr_rank(strings)
}
\arguments{
\item{strings}{A character vector, where each element of the vector is a character string.}

\item{decreasing}{Logical. If \code{FALSE} (the default) strings will be ordered alphabetically
from low to high i.e. A to Z; if \code{TRUE} sort from high to low or Z to A.}
}
\value{
\code{chr_sort()}: A sorted character vector the same length as \code{strings}.

\code{chr_order()}: An integer vector the same length as \code{strings}.

\code{chr_rank()}: An integer vector the same length as \code{strings}.
}
\description{
Sort, order and rank strings in a character vector alphabetically.

\code{chr_sort()} returns a sorted vector.

\code{chr_order()} returns the desired order when used for sub-setting i.e.
\code{x[chr_order(x)]} is the same as \code{chr_sort(x)}. This is particularly useful
for sorting many vectors in the same way.

\code{chr_rank()} returns the rank of the strings; rank 1 is given to the string
that would be first in the sorted list.
}
\examples{
chr_sort(c("c", "a", "b"))
#> [1] "a" "b" "c"
chr_order(c("c", "a", "b"))
#> [1] 2 3 1
chr_rank(c("c", "a", "b"))
#> [1] 3 1 2

}
\seealso{
\code{\link[=sort]{sort()}}, \code{\link[=order]{order()}} and \code{\link[=rank]{rank()}} which these functions are wrappers around.
}
