[{"path":"https://davidfoord1.github.io/suitestrings/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 suitestrings authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"prefixes---operation-type","dir":"Articles","previous_headings":"","what":"Prefixes - <operation-type>","title":"suitestrings conventions","text":"Prefixes used general base behaviour: str_ vectorised operations strings. chr_ vector-wide operations strings.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"str_-for-operations-on-strings","dir":"Articles","previous_headings":"Prefixes - <operation-type>","what":"str_ for operations on strings","title":"suitestrings conventions","text":"character vector, operation applied string. functions useful single strings, also chains inputs outputs map one vector another. example: cases output length() input strings.","code":"strings <- c(\"Hello, world.\", \"Happy birthday!\", \"Nice to meet you.\") strings #> [1] \"Hello, world.\"     \"Happy birthday!\"   \"Nice to meet you.\"  # Transform each string snake_strings <- str_to_snake_case(strings) snake_strings #> [1] \"hello_world\"      \"happy_birthday\"   \"nice_to_meet_you\"  # Is the text \"day\" in each string? day_pattern <- \"day\" day_in_strings <- str_detect(strings, day_pattern) day_in_strings #> [1] FALSE  TRUE FALSE # Vector length is preserved length(strings) #> [1] 3 length(snake_strings)  #> [1] 3 length(day_in_strings) #> [1] 3"},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"chr_-for-vector-wide-operations","dir":"Articles","previous_headings":"Prefixes - <operation-type>","what":"chr_ for vector-wide operations","title":"suitestrings conventions","text":"functions operate character vector whole. may give single piece information vector, re-organised vector length perhaps elements extracted every string. result may length(), always atomic vector .e. won’t list. example, single fact vector: re-organised vector:","code":"# Is the text \"day\" in any of the strings? chr_detect_any(strings, day_pattern) #> [1] TRUE  # Is the text \"day\" in all of the strings? chr_detect_all(strings, day_pattern) #> [1] FALSE # Rearrange the vector in alphabetical order chr_sort(strings) #> [1] \"Happy birthday!\"   \"Hello, world.\"     \"Nice to meet you.\""},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"str_-or-chr_","dir":"Articles","previous_headings":"Prefixes - <operation-type>","what":"str_ or chr_","title":"suitestrings conventions","text":"cases, difference two function names prefix. happens str_ function give list (equal length() input vector) result string . chr_ function give single atomic vector containing elements, used unlist() result str_ version. See extraction every match pattern:","code":"word_pattern <- \"\\\\w+\"  str_result <- str_extract_all(strings, word_pattern) str_result #> [[1]] #> [1] \"Hello\" \"world\" #>  #> [[2]] #> [1] \"Happy\"    \"birthday\" #>  #> [[3]] #> [1] \"Nice\" \"to\"   \"meet\" \"you\"  chr_result <- chr_extract_all(strings, word_pattern) chr_result #> [1] \"Hello\"    \"world\"    \"Happy\"    \"birthday\" \"Nice\"     \"to\"       \"meet\"     #> [8] \"you\"   length(str_result) # Length is preserved here #> [1] 3 length(chr_result) # Not here #> [1] 8"},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"pattern-occurrence---first-nth-last-or-all","dir":"Articles","previous_headings":"Suffixes - <action-location>","what":"Pattern Occurrence - first, nth, last or all","title":"suitestrings conventions","text":"majority functions include matching patterns (typically regular expressions) include suffix occurrence pattern within string want work . following apply action verbs locate, extract, replace, remove, split: _first matches first occurrence. _nth matches specific occurrence, set additional argument n. _last matches last occurrence. _all matches every occurrence. can expect single vector resulting _first, _last _nth, whereas str_<action>_all() return list. , can use chr_<action>_all() variant get single atomic vector.","code":"str_extract_first(strings, word_pattern) # the first word #> [1] \"Hello\" \"Happy\" \"Nice\" str_extract_nth(strings, word_pattern, 2) # the second word #> [1] \"world\"    \"birthday\" \"to\" str_extract_last(strings, word_pattern) # the last word #> [1] \"world\"    \"birthday\" \"you\"  str_extract_all(strings, word_pattern) # all words #> [[1]] #> [1] \"Hello\" \"world\" #>  #> [[2]] #> [1] \"Happy\"    \"birthday\" #>  #> [[3]] #> [1] \"Nice\" \"to\"   \"meet\" \"you\""},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"function-arguments","dir":"Articles","previous_headings":"","what":"Function arguments","title":"suitestrings conventions","text":"may noticed repeating example names: function(strings, some_pattern). quite deliberate highlight common first second arguments. Chaining first argument strings - Almost every function takes first argument. ’s character vector containing strings manipulate. main reason first argument make suitable piping |> magrittr::%>%. Pattern matching pattern - second argument function uses pattern matching. single string matched, default interpreted regular expression. fixed - Accompanying every pattern argument logical argument optionally interpret pattern literal string matched exactly. String combination ... - minority functions take several character vectors first arguments instead strings; str_concat() str_glue(). pass multiple character vectors resulting vector length() longest input vector. separator - string placed input elements output string.","code":"# Easily perform a chain of operations on strings # Like these unnecessary steps to make a happy hello strings |>    chr_sort() |>    str_extract_first(word_pattern) |>    chr_collapse(\" \") |>   str_remove_last(word_pattern) |>    str_concat(\":)\") #> [1] \"Happy Hello :)\"  # You can probably find better uses"},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/articles/suitestrings-conventions.html","id":"compared-to-stringr","dir":"Articles","previous_headings":"Comparison to other packages","what":"Compared to stringr","title":"suitestrings conventions","text":"’ve broken away stringr convention starting every function str_. ’re used , might able immediately find equivalent functions. example, sort moved str_sort() chr_sort(). However, get used chr_ informative, useful immediately identifying function applied vector-wide . stringr::str_split_1() instance, added something afterthought str_split family, getting atomic vector containing results, whereas equivalent suitestrings::chr_split_all() sits natural part naming scheme.","code":"chr_split_all(strings, \" \") #> [1] \"Hello,\"    \"world.\"    \"Happy\"     \"birthday!\" \"Nice\"      \"to\"        #> [7] \"meet\"      \"you.\""},{"path":"https://davidfoord1.github.io/suitestrings/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Foord. Author, maintainer.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Foord D (2024). suitestrings: consistent approach common string operations. R package version 0.0.0.9000, https://github.com/davidfoord1/suitestrings, https://davidfoord1.github.io/suitestrings/.","code":"@Manual{,   title = {suitestrings: A consistent approach to common string operations},   author = {David Foord},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/davidfoord1/suitestrings},   url = {https://davidfoord1.github.io/suitestrings/}, }"},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"suitestrings","dir":"","previous_headings":"","what":"A consistent approach to common string operations","title":"A consistent approach to common string operations","text":"primarily personal learning project. uses wrappers around base R string operations provide comprehensive convenient set functions working strings R. specifically, : Combining strings. Cleaning transforming strings. Manipulating strings based regular expression patterns. interface built consistent naming scheme argument structure. first argument string strings work , makes particularly convenient work pipes. Functions start prefixes easy identification auto-completion: str_ vectorised operations strings. chr_ vector-wide operations strings. can read vignette(\"suitestrings-conventions\").","code":""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A consistent approach to common string operations","text":"can install suitestrings GitHub : package built base R, additional dependencies install.","code":"# install.packages(\"devtools\") devtools::install_github(\"davidfoord1/suitestrings\", build_vignettes = TRUE)  # Load the package to your library library(suitestrings)"},{"path":[]},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"concatenate-strings","dir":"","previous_headings":"Examples > Combine strings together","what":"Concatenate strings","title":"A consistent approach to common string operations","text":"","code":"str_concat(c(\"Hello\", \"How are\"), c(\"world!\", \"you?\"), separator = \" \") #> [1] \"Hello world!\" \"How are you?\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"evaluate-r-expression-in-strings","dir":"","previous_headings":"Examples > Combine strings together","what":"Evaluate R expression in strings","title":"A consistent approach to common string operations","text":"str_glue() treats text braces {} like R code","code":"statement <- \"{x} squared is {x^2} and its square root is {sqrt(x)}.\"  x <- 25 str_glue(statement) #> [1] \"25 squared is 625 and its square root is 5.\"  x <- 16 str_glue(statement) #> [1] \"16 squared is 256 and its square root is 4.\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"clean-and-transform-strings","dir":"","previous_headings":"Examples","what":"Clean and transform strings","title":"A consistent approach to common string operations","text":"","code":"# Remove leading/trailing spaces and reduce middle spaces to one str_squish(\"  Too   much     space        \") #> [1] \"Too much space\"  # Append a specific number of characters writeLines(str_indent(c(\"Hello\", \"World\"), 3)) #>    Hello #>    World  # Convert strings to different cases str_to_snake_case(\"  This /IS/  a ->>!!GREAT!!<<-STRing!!\") #> [1] \"this_is_a_great_string\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"manipulate-strings-based-on-regular-expression-patterns","dir":"","previous_headings":"Examples","what":"Manipulate strings based on regular expression patterns","title":"A consistent approach to common string operations","text":"","code":"# Prepare an example character vector. strings <- c(\"flat-hat\", \"backpack\", \"roll\", \"cat-sat-on-a-mat\") # Define a pattern for a three letter sequence with \"a\" in the middle. pattern <- \"\\\\wa\\\\w\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"detect-extract-and-replace-patterns-in-strings","dir":"","previous_headings":"Examples > Manipulate strings based on regular expression patterns","what":"Detect, extract and replace patterns in strings","title":"A consistent approach to common string operations","text":"","code":"# Does a string contain a match? str_detect(strings, pattern) #> [1]  TRUE  TRUE FALSE  TRUE # Get the first match in a string str_extract_first(strings, pattern) #> [1] \"lat\" \"bac\" NA    \"cat\" # Replace the first match in a string str_replace_first(strings, pattern, \"rat\") #> [1] \"frat-hat\"         \"ratkpack\"         \"roll\"             \"rat-sat-on-a-mat\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"work-with-specific-occurrences-of-patterns","dir":"","previous_headings":"Examples > Manipulate strings based on regular expression patterns","what":"Work with specific occurrences of patterns","title":"A consistent approach to common string operations","text":"Using suffixes _first, _nth _last","code":"# Get the second match for each string str_extract_nth(strings, pattern, 2) #> [1] \"hat\" \"pac\" NA    \"sat\" # Remove the last match in each string str_remove_last(strings, pattern) #> [1] \"flat-\"         \"backk\"         \"roll\"          \"cat-sat-on-a-\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"work-with-every-occurrence-of-a-pattern","dir":"","previous_headings":"Examples > Manipulate strings based on regular expression patterns","what":"Work with every occurrence of a pattern","title":"A consistent approach to common string operations","text":"","code":"str_locate_all(strings, pattern) #> [[1]] #>      start end #> [1,]     2   4 #> [2,]     6   8 #>  #> [[2]] #>      start end #> [1,]     1   3 #> [2,]     5   7 #>  #> [[3]] #>      start end #> [1,]    NA  NA #>  #> [[4]] #>      start end #> [1,]     1   3 #> [2,]     5   7 #> [3,]    14  16  # Get a list of every match for each string str_extract_all(strings, pattern) #> [[1]] #> [1] \"lat\" \"hat\" #>  #> [[2]] #> [1] \"bac\" \"pac\" #>  #> [[3]] #> character(0) #>  #> [[4]] #> [1] \"cat\" \"sat\" \"mat\""},{"path":"https://davidfoord1.github.io/suitestrings/index.html","id":"work-on-the-character-vector-as-a-whole","dir":"","previous_headings":"Examples > Manipulate strings based on regular expression patterns","what":"Work on the character vector as a whole","title":"A consistent approach to common string operations","text":"","code":"# Get every match from `strings` into one character vector chr_extract_all(strings, pattern) #> [1] \"lat\" \"hat\" \"bac\" \"pac\" \"cat\" \"sat\" \"mat\"  # Which elements of the vector contain a match? chr_which(strings, pattern) #> [1] 1 2 4  # Get the subset of `strings` that contain a match chr_subset(strings, pattern) #> [1] \"flat-hat\"         \"backpack\"         \"cat-sat-on-a-mat\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a character vector to a single string — chr_collapse","title":"Collapse a character vector to a single string — chr_collapse","text":"Collapse character vector single string","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a character vector to a single string — chr_collapse","text":"","code":"chr_collapse(strings, separator = \"\")"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a character vector to a single string — chr_collapse","text":"strings character vector, element vector character string. separator character string separate concatenated elements. Defaults empty string, results separation elements.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a character vector to a single string — chr_collapse","text":"single character string","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse a character vector to a single string — chr_collapse","text":"","code":"chr_collapse(c(\"Hello\", \"world\"), \" \") #> [1] \"Hello world\" #> [1] \"Hello world\" chr_collapse(letters, \"-\") #> [1] \"a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\" #> [1] \"a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\" chr_collapse(1:9) #> [1] \"123456789\" #> [1] \"123456789\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Count matching indices in character vector — chr_count_matches","title":"Count matching indices in character vector — chr_count_matches","text":"Count matching indices character vector","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count matching indices in character vector — chr_count_matches","text":"","code":"chr_count_matches(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count matching indices in character vector — chr_count_matches","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count matching indices in character vector — chr_count_matches","text":"single integer representing number matches found","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count matching indices in character vector — chr_count_matches","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_count_matches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count matching indices in character vector — chr_count_matches","text":"","code":"chr_count_matches(letters, \"[aeiou]\") #> [1] 5 #> [1] 5"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-organise a character vector — chr_sort","title":"Re-organise a character vector — chr_sort","text":"Sort, order rank strings character vector alphabetically. chr_sort() returns sorted vector. chr_order() returns desired order used sub-setting .e. x[chr_order(x)] chr_sort(x). particularly useful sorting many vectors way. chr_rank() returns rank strings; rank 1 given string first sorted list.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-organise a character vector — chr_sort","text":"","code":"chr_sort(strings, decreasing = FALSE)  chr_order(strings, decreasing = FALSE)  chr_rank(strings, decreasing = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-organise a character vector — chr_sort","text":"strings character vector, element vector character string. decreasing Logical. FALSE (default) strings ordered alphabetically low high .e. Z; TRUE sort high low Z .","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-organise a character vector — chr_sort","text":"chr_sort(): sorted character vector length strings. chr_order(): integer vector length strings. chr_rank(): integer vector length strings.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-organise a character vector — chr_sort","text":"","code":"strings <- c(\"cherry\", \"apple\", \"banana\")  chr_sort(strings) #> [1] \"apple\"  \"banana\" \"cherry\" #> [1] \"apple\"  \"banana\" \"cherry\" chr_order(strings) #> [1] 2 3 1 #> [1] 2 3 1 chr_rank(strings) #> [1] 3 1 2 #> [1] 3 1 2 chr_sort(strings, decreasing = TRUE) #> [1] \"cherry\" \"banana\" \"apple\"  #> [1] \"cherry\" \"banana\" \"apple\"  strings[chr_order(strings)] #> [1] \"apple\"  \"banana\" \"cherry\" #> [1] \"apple\"  \"banana\" \"cherry\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get matching elements — chr_subset","title":"Get matching elements — chr_subset","text":"chr_subset returns subset input character vector, containing elements match specified pattern.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get matching elements — chr_subset","text":"","code":"chr_subset(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get matching elements — chr_subset","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get matching elements — chr_subset","text":"character vector containing elements strings match specified pattern. matches found, empty character vector returned.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get matching elements — chr_subset","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get matching elements — chr_subset","text":"","code":"chr_subset(c(\"apple\", \"banana\", \"cherry\", \"date\"), \"a\") #> [1] \"apple\"  \"banana\" \"date\"   #> [1] \"apple\" \"banana\" \"date\" chr_subset(c(\"apple\", \"banana\", \"cherry\", \"date\"), \"^a\") #> [1] \"apple\" #> [1] \"apple\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove duplicated strings — chr_unique","title":"Remove duplicated strings — chr_unique","text":"Remove duplicate values character vector.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove duplicated strings — chr_unique","text":"","code":"chr_unique(strings)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove duplicated strings — chr_unique","text":"strings character vector, element vector character string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove duplicated strings — chr_unique","text":"character vector, usually shorter strings, containing distinct values.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove duplicated strings — chr_unique","text":"","code":"chr_unique(c(\"a\", \"b\", \"a\", \"c\")) #> [1] \"a\" \"b\" \"c\" #> [1] \"a\" \"b\" \"c\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":null,"dir":"Reference","previous_headings":"","what":"Find matching indices in character vector — chr_which","title":"Find matching indices in character vector — chr_which","text":"Find matching indices character vector","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find matching indices in character vector — chr_which","text":"","code":"chr_which(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find matching indices in character vector — chr_which","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find matching indices in character vector — chr_which","text":"integer vector matching indices string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find matching indices in character vector — chr_which","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/chr_which.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find matching indices in character vector — chr_which","text":"","code":"chr_which(letters, \"[aeiou]\") #> [1]  1  5  9 15 21 #> [1]  1  5  9 15 21"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate strings — str_concat","title":"Concatenate strings — str_concat","text":"str_concat() takes multiple string arguments concatenates single string, inserting specified separator piece.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate strings — str_concat","text":"","code":"str_concat(..., separator = \"\")"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate strings — str_concat","text":"... One character vectors objects coercible character vectors. strings objects concatenated. separator character string separate concatenated elements. Defaults empty string, results separation elements.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate strings — str_concat","text":"single character string representing concatenation input elements, separated specified separator.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate strings — str_concat","text":"","code":"str_concat(\"Hello\", \"world\", separator = \" \") #> [1] \"Hello world\" #> [1] \"Hello world\" str_concat(\"2023\", \"01\", \"01\", separator = \"-\") #> [1] \"2023-01-01\" #> [1] \"2023-01-01\" str_concat(\"One\", \"Two\", \"Three\") #> [1] \"OneTwoThree\" #> [1] \"OneTwoThree\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the presence of a pattern in a string — str_detect","title":"Detect the presence of a pattern in a string — str_detect","text":"functions search patterns strings","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the presence of a pattern in a string — str_detect","text":"","code":"str_detect(strings, pattern, fixed = FALSE)  str_detect_starts_with(strings, pattern, fixed = FALSE)  str_detect_ends_with(strings, pattern, fixed = FALSE)  chr_detect_any(strings, pattern, fixed = FALSE)  chr_detect_all(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the presence of a pattern in a string — str_detect","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the presence of a pattern in a string — str_detect","text":"str_detect(): logical vector equal length strings, indicating whether pattern found strings. str_detect_starts_with() str_detect_ends_with(): logical vector equal length strings, indicating whether pattern found start-end-strings, respectively. chr_detect_any(): single logical value whether pattern occurs anywhere character vector. chr_detect_all(): single logical value whether pattern occurs every element character vector. logical vector indicating presence pattern string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect the presence of a pattern in a string — str_detect","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_detect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect the presence of a pattern in a string — str_detect","text":"","code":"strings <- c(\"apple\", \"banana\", \"cherry\")  str_detect(strings, \"a\") #> [1]  TRUE  TRUE FALSE #> [1]  TRUE  TRUE FALSE str_detect_starts_with(strings, \"a\") #> [1]  TRUE FALSE FALSE #> [1]  TRUE FALSE FALSE str_detect_ends_with(strings, \"a\") #> [1] FALSE  TRUE FALSE #> [1] FALSE  TRUE FALSE  chr_detect_any(strings, \"a\") #> [1] TRUE #> [1] TRUE chr_detect_all(strings, \"a\") #> [1] FALSE #> [1] FALSE"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract complete matches from strings — str_extract_first","title":"Extract complete matches from strings — str_extract_first","text":"functions extract parts strings based pattern. str_extract_first(), str_extract_nth() str_extract_last() extract first, nth last occurrence pattern string, character vector length strings. str_extract_all() extracts character vector occurrences pattern string, list length strings. chr_extract_all() extracts occurrences pattern strings character vector.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract complete matches from strings — str_extract_first","text":"","code":"str_extract_first(strings, pattern, fixed = FALSE)  str_extract_all(strings, pattern, fixed = FALSE)  str_extract_nth(strings, pattern, n, fixed = FALSE)  str_extract_last(strings, pattern, fixed = FALSE)  chr_extract_all(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract complete matches from strings — str_extract_first","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE. n (str_extract_nth ) Integer, nth occurrence pattern extract. Negative values count back end.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract complete matches from strings — str_extract_first","text":"str_extract_first(), str_extract_nth() str_extract_last() return character vector length input vector strings. contains extracted portion string, corresponding first, nth last match pattern, respectively. Strings corresponding match represented NA values. str_extract_all(): returns list character vectors, list element corresponds string input vector. element character vector matches string. matches found string, corresponding list element empty character vector .e. character(0). list length input vector strings. chr_extract_all(): returns character vector containing every single match input vector. Non-matches ignored. equivalent calling unlist() output str_extract_all().","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract complete matches from strings — str_extract_first","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract complete matches from strings — str_extract_first","text":"","code":"str_extract_first(c(\"mat\", \"bat\", \"pig\", \"cat-in-a-hat\"), \".at\") #> [1] \"mat\" \"bat\" NA    \"cat\" #> [1] \"mat\" \"bat\" NA    \"cat\"  str_extract_all(c(\"mat\", \"bat\", \"pig\", \"cat-in-a-hat\"), \".at\") #> [[1]] #> [1] \"mat\" #>  #> [[2]] #> [1] \"bat\" #>  #> [[3]] #> character(0) #>  #> [[4]] #> [1] \"cat\" \"hat\" #>  #> [[1]] #> [1] \"mat\" #> #> [[2]] #> [1] \"bat\" #> #> [[3]] #> character(0) #> #> [[4]] #> [1] \"cat\" \"hat\"  str_extract_nth(c(\"mat\", \"bat\", \"pig\", \"cat-in-a-hat\"), \".at\", 2) #> [1] NA    NA    NA    \"hat\" #> [1] NA    NA    NA    \"hat\"  str_extract_last(c(\"mat\", \"bat\", \"pig\", \"cat-in-a-hat\"), \".at\") #> [1] \"mat\" \"bat\" NA    \"hat\" #> [1] \"mat\" \"bat\" NA    \"hat\"  chr_extract_all(c(\"mat\", \"bat\", \"pig\", \"cat-in-a-hat\"), \".at\") #> [1] \"mat\" \"bat\" \"cat\" \"hat\" #> [1] \"mat\" \"bat\" \"cat\" \"hat\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate R code within strings — str_glue","title":"Evaluate R code within strings — str_glue","text":"Combine strings, text inside braces {} evaluated R expressions output directly within string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate R code within strings — str_glue","text":"","code":"str_glue(..., separator = \"\", environment = parent.frame())"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate R code within strings — str_glue","text":"... Expression strings format concatenate. Named arguments taken temporary variables available substitution. separator character string separate concatenated elements. Defaults empty string, results separation elements. environment evironment object evaluate expression . default environment str_glue() called .","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate R code within strings — str_glue","text":"character vector length longest input.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate R code within strings — str_glue","text":"Unnamed arguments ... taken strings containing expressions evaluate format. Multiple inputs concatenated together formatted. Named arguments added variables temporary environment along variables supplied within environment. Doubling braces escapes , want braces output strings.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_glue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate R code within strings — str_glue","text":"","code":"x <- 5  # Evaluate R expressions in braces {} in the middle of a string str_glue(\"The square of {x} is {x^2}\") #> [1] \"The square of 5 is 25\" #> [1] \"The square of 5 is 25\" tri_num_str <- \\(n) chr_collapse(cumsum(seq(n)), \", \") str_glue(\"The first {x} triangle numbers are {tri_num_str(x)}.\") #> [1] \"The first 5 triangle numbers are 1, 3, 6, 10, 15.\" #> [1] \"The first 5 triangle numbers are 1, 3, 6, 10, 15.\"  # Named arguments are taken as temporary variables. str_glue(    \"My name is {name}, \",    \"I am {age} years old. \",    \"In {x} years I'll be {age + x}.\",    name = \"John\",    age = 45 ) #> [1] \"My name is John, I am 45 years old. In 5 years I'll be 50.\" #> [1] \"My name is John, I am 45 years old. In 5 years I'll be 50.\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_indent.html","id":null,"dir":"Reference","previous_headings":"","what":"Add characters to the ends of strings — str_indent","title":"Add characters to the ends of strings — str_indent","text":"Add characters ends strings","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_indent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add characters to the ends of strings — str_indent","text":"","code":"str_indent(strings, times = 1, side = c(\"left\", \"right\", \"both\"), indent = \" \")"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_indent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add characters to the ends of strings — str_indent","text":"strings character vector, element vector character string. times number times indent repeated, side specified. side side string indent applied, one \"left\", \"right\" \"\". left side default. indent characters used indent.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_indent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add characters to the ends of strings — str_indent","text":"character vector length strings, element indented specified times, indent, side arguments.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_indent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add characters to the ends of strings — str_indent","text":"","code":"str_indent(c(\"Hello\", \"World\"), 3) #> [1] \"   Hello\" \"   World\" #> [1] \"   Hello\" \"   World\" str_indent(c(\"Hello\", \"World\"), 3, indent = \".\") #> [1] \"...Hello\" \"...World\" #> [1] \"...Hello\" \"...World\" str_indent(c(\"Hello\", \"World\"), 3, \"both\", \"-\") #> [1] \"---Hello---\" \"---World---\" #> [1] \"---Hello---\" \"---World---\"  # Get extra with it \"wow\" |>   str_indent(side = \"both\") |>   str_indent(3, indent = \"->>\") |>   str_indent(3,  side = \"right\", indent = \"<<-\") |>   str_indent(2, side = \"both\", indent = \"-||-\") |>   str_indent(2, indent = \"[\") |>   str_indent(2, side = \"right\", indent = \"]\") #> [1] \"[[-||--||-->>->>->> wow <<-<<-<<--||--||-]]\" #> [1] \"[[-||--||-->>->>->> wow <<-<<-<<--||--||-]]\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate pattern matches in strings — str_locate_first","title":"Locate pattern matches in strings — str_locate_first","text":"functions find occurrences pattern strings. str_locate_first(), str_locate_nth() str_locate_last() find specified occurrence pattern string. str_locate_all() finds occurrences pattern string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate pattern matches in strings — str_locate_first","text":"","code":"str_locate_first(strings, pattern, fixed = FALSE)  str_locate_all(strings, pattern, fixed = FALSE)  str_locate_nth(strings, pattern, n, fixed = FALSE)  str_locate_last(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate pattern matches in strings — str_locate_first","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE. n str_locate_nth() : Integer, nth occurrence pattern extract. Negative values count back end.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate pattern matches in strings — str_locate_first","text":"str_locate_first(), str_locate_nth() str_locate_last(): return two-column matrix start end positions first, nth last match respectively. row string. str_locate_all(): returns list matrices. matrix string row match. match found, NA values returned.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate pattern matches in strings — str_locate_first","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_locate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate pattern matches in strings — str_locate_first","text":"","code":"str_locate_first(\"Hello world\", \"world\") #>      start end #> [1,]     7  11 #>      start end #> [1,]     7  11 str_locate_first(c(\"Hello world\", \"Goodbye world\"), \"o\") #>      start end #> [1,]     5   5 #> [2,]     2   2 #>      start end #> [1,]     5   5 #> [2,]     2   2  str_locate_all(c(\"Hello world\", \"Goodbye world\"), \"world\") #> [[1]] #>      start end #> [1,]     7  11 #>  #> [[2]] #>      start end #> [1,]     9  13 #>  #> [[1]] #>      start end #> [1,]     7  11 #> #> [[2]] #>      start end #> [1,]     9  13 str_locate_all(c(\"Hello world\", \"Goodbye world\"), \"o\") #> [[1]] #>      start end #> [1,]     5   5 #> [2,]     8   8 #>  #> [[2]] #>      start end #> [1,]     2   2 #> [2,]     3   3 #> [3,]    10  10 #>  #> [[1]] #>      start end #> [1,]     5   5 #> [2,]     8   8 #> #> [[2]] #>      start end #> [1,]     2   2 #> [2,]     3   3 #> [3,]    10  10  str_locate_nth(\"Hello world\", \"world\", 2) #>      start end #> [1,]    NA  NA #>      start end #> [1,]    NA  NA str_locate_nth(c(\"Hello world\", \"Goodbye world\"), \"o\", 2) #>      start end #> [1,]     8   8 #> [2,]     3   3 #>      start end #> [1,]     8   8 #> [2,]     3   3  str_locate_last(\"Hello world\", \"world\") #>      start end #> [1,]     7  11 #>      start end #> [1,]     7  11 str_locate_last(c(\"Hello world\", \"Goodbye world\"), \"o\") #>      start end #> [1,]     8   8 #> [2,]    10  10 #>      start end #> [1,]     8   8 #> [2,]    10  10"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_pad.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad a string to a minimum length — str_pad","title":"Pad a string to a minimum length — str_pad","text":"Pad string minimum length","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_pad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad a string to a minimum length — str_pad","text":"","code":"str_pad(   strings,   min_length = max(nchar(strings)) + 1,   side = c(\"left\", \"right\", \"both\"),   pad = \" \",   prefer_side = c(\"right\", \"left\") )"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_pad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad a string to a minimum length — str_pad","text":"strings character vector, element vector character string. min_length minimum number characters padded string. default one character longest string strings. Strings already longer min_length unchanged. side side string indent applied, one \"left\", \"right\" \"\". left side default. \"\", half required padding length added side, prefer_side controlling odd additions go. pad single character used pad space prefer_side side \"\", side get one extra pad min_length odd? Default right side.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_pad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad a string to a minimum length — str_pad","text":"character vector equal length strings, string least many characters min_length. Strings already longer min_length unchanged.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_pad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad a string to a minimum length — str_pad","text":"","code":"str_pad(c(\"Hello\", \"World\")) #> [1] \" Hello\" \" World\" #> [1] \" Hello\" \" World\"  str_pad(c(\"Hello\", \"World\"), 10) #> [1] \"     Hello\" \"     World\" #> [1] \"     Hello\" \"     World\"  str_pad(c(\"Hello\", \"World\"),         10,         side = \"both\") #> [1] \"  Hello   \" \"  World   \" #> [1] \"  Hello   \" \"  World   \"  str_pad(c(\"Hello\", \"World\"),         10,         side = \"both\",         pad = \".\") #> [1] \"..Hello...\" \"..World...\" #> [1] \"..Hello...\" \"..World...\"  str_pad(c(\"Hello\", \"World\"),         10,         side = \"both\",         pad = \".\",         prefer_side = \"left\") #> [1] \"...Hello..\" \"...World..\" #> [1] \"...Hello..\" \"...World..\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Patterns from Strings — str_remove_first","title":"Remove Patterns from Strings — str_remove_first","text":"str_remove_first() removes first occurrence pattern string. str_remove_all() removes occurrences pattern string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Patterns from Strings — str_remove_first","text":"","code":"str_remove_first(strings, pattern, fixed = FALSE)  str_remove_all(strings, pattern, fixed = FALSE)  str_remove_nth(strings, pattern, n, fixed = FALSE)  str_remove_last(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Patterns from Strings — str_remove_first","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE. n (str_remove_nth ) Integer, nth occurrence pattern replace. Negative values count back end.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Patterns from Strings — str_remove_first","text":"character vector length strings, specified pattern removed. str_remove_first(), first occurrence pattern string removed. str_remove_all(), occurrences pattern string removed.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Patterns from Strings — str_remove_first","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Patterns from Strings — str_remove_first","text":"","code":"string <- \"carrot, car park, cable car\"  str_remove_first(string, \"car\") #> [1] \"rot, car park, cable car\" #> [1] \"rot, car park, cable car\" str_remove_nth(string, \"car\", 2) #> [1] \"carrot,  park, cable car\" #> [1] \"carrot,  park, cable car\" str_remove_last(string, \"car\") #> [1] \"carrot, car park, cable \" #> [1] \"carrot, car park, cable \" str_remove_all(string, \"car\") #> [1] \"rot,  park, cable \" #> [1] \"rot,  park, cable \""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace parts of a string with new text. — str_replace_first","title":"Replace parts of a string with new text. — str_replace_first","text":"str_replace_first(), str_replace_nth() str_replace_last(): Replace specified pattern occurrence string. str_replace_all() Replace every pattern occurrence string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace parts of a string with new text. — str_replace_first","text":"","code":"str_replace_first(strings, pattern, replacement, fixed = FALSE)  str_replace_all(strings, pattern, replacement, fixed = FALSE)  str_replace_nth(strings, pattern, replacement, n, fixed = FALSE)  str_replace_last(strings, pattern, replacement, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace parts of a string with new text. — str_replace_first","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. replacement single string containing text replace pattern . fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE. n (str_replace_nth ) Integer, nth occurrence pattern replace. Negative values count back end.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace parts of a string with new text. — str_replace_first","text":"str_replace_first(), str_replace_nth() str_replace_last(): Returns altered character vector equal length strings, first, nth last pattern occurrence, respectively, replaced replacement text. str_replace_all() Returns altered character vector equal length strings, every match string replaced.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace parts of a string with new text. — str_replace_first","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace parts of a string with new text. — str_replace_first","text":"","code":"strings <- c(\"banana\", \"banana banana\", \"no match here\")  str_replace_first(strings, \"na\", \"NA\") #> [1] \"baNAna\"        \"baNAna banana\" \"no match here\" #> [1] \"baNAna\"        \"baNAna banana\" \"no match here\" str_replace_nth(strings, \"na\", \"NA\", 2) #> [1] \"banaNA\"        \"banaNA banana\" \"no match here\" #> [1] \"banaNA\"        \"banaNA banana\" \"no match here\" str_replace_last(strings, \"na\", \"NA\") #> [1] \"banaNA\"        \"banana banaNA\" \"no match here\" #> [1] \"banaNA\"        \"banana banaNA\" \"no match here\" str_replace_all(strings, \"na\", \"NA\") #> [1] \"baNANA\"        \"baNANA baNANA\" \"no match here\" #> [1] \"baNANA\"        \"baNANA baNANA\" \"no match here\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split strings by a pattern — str_split_all","title":"Split strings by a pattern — str_split_all","text":"str_split_first(), str_split_nth() str_split_last(): take first, nth last result splitting string input vector based pattern delimiter. str_split_all() splits string input vector substrings based pattern. chr_split_all() splits strings input vector returns substrings single character vector.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split strings by a pattern — str_split_all","text":"","code":"str_split_all(strings, pattern, fixed = FALSE)  str_split_first(strings, pattern, fixed = FALSE)  str_split_nth(strings, pattern, n, fixed = FALSE)  str_split_last(strings, pattern, fixed = FALSE)  chr_split_all(strings, pattern, fixed = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split strings by a pattern — str_split_all","text":"strings character vector, element vector character string. pattern single character string searched element strings. default, pattern interpreted regular expression (regex). fixed argument set TRUE, pattern treated literal string matched exactly. fixed Logical; whether pattern matched exactly, treating regex special characters regular  string characters. Default FALSE. n (str_split_nth ) Integer, index substring extract split string. Negative values count back end.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split strings by a pattern — str_split_all","text":"str_split_first(), str_split_nth() str_split_last(): character vector length strings, element first, nth last substring obtained splitting corresponding element strings. str_split_all(): list length strings, element character vector substrings obtained splitting corresponding element strings. chr_split_all(): single character vector containing substrings obtained splitting element strings. Equivalent using unlist() output str_split_all().","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split strings by a pattern — str_split_all","text":"functions built using base R regular expression functions. {suitestrings} uses Perl-compatible Regular Expressions (PCRE). achieved setting perl = TRUE underlying base functions. See R's regexp documentation info regex implementation. complete syntax details see https://www.pcre.org/current/doc/html/","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split strings by a pattern — str_split_all","text":"","code":"str_split_first(c(\"one,two,three\", \"abc,def,ghi\"), \",\") #> [1] \"one\" \"abc\" #> [1] \"one\" \"abc\" str_split_nth(c(\"one,two,three\", \"abc,def,ghi\"), \",\", 2) #> [1] \"two\" \"def\" #> [1] \"two\" \"def\" str_split_last(c(\"one,two,three\", \"abc,def,ghi\"), \",\") #> [1] \"three\" \"ghi\"   #> [1] \"three\" \"ghi\"  str_split_all(c(\"one,two,three\", \"abc,def,ghi\"), \",\") #> [[1]] #> [1] \"one\"   \"two\"   \"three\" #>  #> [[2]] #> [1] \"abc\" \"def\" \"ghi\" #>  #> [[1]] #> [1] \"one\"   \"two\"   \"three\" #> #> [[2]] #> [1] \"abc\" \"def\" \"ghi\" chr_split_all(c(\"one,two,three\", \"abc,def,ghi\"), \",\") #> [1] \"one\"   \"two\"   \"three\" \"abc\"   \"def\"   \"ghi\"   #> [1] \"one\"   \"two\"   \"three\" \"abc\"   \"def\"   \"ghi\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_to_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert strings to different cases — str_to_upper_case","title":"Convert strings to different cases — str_to_upper_case","text":"Convert strings \"UPPER CASE\", \"lower case\", \"snake_case\" \"camelCase\".","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_to_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert strings to different cases — str_to_upper_case","text":"","code":"str_to_upper_case(strings)  str_to_lower_case(strings)  str_to_snake_case(strings, split_on_capital = FALSE)  str_to_camel_case(strings, capitalise_first = FALSE)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_to_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert strings to different cases — str_to_upper_case","text":"strings character vector, element vector character string. split_on_capital str_to_snake_case() : whether treat every upper case letter start new word. converting camelCase. capitalise_first str_to_camel_case() : whether first letter first word string capitalised \"PascalCase\" \"camelCase\".","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_to_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert strings to different cases — str_to_upper_case","text":"str_to_upper_case(): Returns strings lower case letters converted upper case. str_to_lower_case() Returns strings upper case letters converted lower case. str_to_snake_case() Returns strings upper case letters converted lower case, non-alphanumeric characters words converted underscore \"_\", preceding/trailing non-alphanumeric characters removed.","code":""},{"path":[]},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_to_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert strings to different cases — str_to_upper_case","text":"","code":"string <- \"A good day for kite-flying!\"  str_to_upper_case(string) #> [1] \"A GOOD DAY FOR KITE-FLYING!\" #> [1] \"A GOOD DAY FOR KITE-FLYING!\" str_to_lower_case(string) #> [1] \"a good day for kite-flying!\" #> [1] \"a good day for kite-flying!\" str_to_snake_case(string) #> [1] \"a_good_day_for_kite_flying\" #> [1] \"a_good_day_for_kite_flying\" str_to_camel_case(string) #> [1] \"aGoodDayForKiteFlying\" #> [1] \"aGoodDayForKiteFlying\"  # Optionally convert from camelCase: str_to_snake_case(   str_to_camel_case(string),   split_on_capital = TRUE ) #> [1] \"a_good_day_for_kite_flying\" #> [1] \"a_good_day_for_kite_flying\"  # Optionally capitalise first letter of the word str_to_camel_case(   string,   capitalise_first = TRUE ) #> [1] \"AGoodDayForKiteFlying\" #> [1] \"AGoodDayForKiteFlying\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove trailing and leading whitespace — str_trim","title":"Remove trailing and leading whitespace — str_trim","text":"Remove trailing leading whitespace","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove trailing and leading whitespace — str_trim","text":"","code":"str_trim(strings)  str_squish(strings)"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove trailing and leading whitespace — str_trim","text":"strings character vector, element vector character string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove trailing and leading whitespace — str_trim","text":"character vector, whitespace removed start end string.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove trailing and leading whitespace — str_trim","text":"","code":"print(str_trim(\"    Remove these extra spaces    \")) #> [1] \"Remove these extra spaces\" #> [1] \"Remove these extra spaces\" print(str_trim(\"Remove trailing new line character \\n\")) #> [1] \"Remove trailing new line character\" #> [1] \"Remove trailing new line character\" print(str_trim(\"But leave space     in   the      middle\")) #> [1] \"But leave space     in   the      middle\" #> [1] \"But leave space     in   the      middle\"  print(str_squish(\" Don't leave   space    in  the   middle   here  \")) #> [1] \"Don't leave space in the middle here\" #> [1] \"Don't leave space in the middle here\""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap character strings to format as paragraphs — str_wrap","title":"Wrap character strings to format as paragraphs — str_wrap","text":"character string input first split paragraphs (lines containing whitespace ). paragraphs formatted breaking lines word boundaries. target columns wrapping lines indentation first subsequent lines paragraph can controlled independently.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap character strings to format as paragraphs — str_wrap","text":"","code":"str_wrap(   strings,   min_width = 80,   indent = 0,   exdent = 0,   prefix = \"\",   initial = prefix )"},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap character strings to format as paragraphs — str_wrap","text":"strings #' character vector, element vector character string. min_width positive integer giving minimum line width wrapping lines output. indent non-negative integer giving indentation first line paragraph. exdent non-negative integer specifying indentation subsequent lines paragraphs. prefix character string used prefix subsequent lines paragraph. initial character string used prefix first line paragraph.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap character strings to format as paragraphs — str_wrap","text":"list character vector input string strings. new strings character vector single line string formatted paragraph.","code":""},{"path":"https://davidfoord1.github.io/suitestrings/reference/str_wrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrap character strings to format as paragraphs — str_wrap","text":"","code":"text <- paste(readLines(file.path(R.home(\"doc\"), \"THANKS\")), collapse = \"\\n\")  writeLines(str_wrap(text, min_width = 60)) #> R would not be what it is today without the invaluable help #> of these people outside of the (former and current) R Core #> team, who contributed by donating code, bug fixes and #> documentation: #>  #> Valerio Aimale, Suharto Anggono, Thomas Baier, Gabe Becker, #> Henrik Bengtsson, Roger Bivand, Ben Bolker, David Brahm, #> G\"oran Brostr\"om, Patrick Burns, Vince Carey, Saikat #> DebRoy, Matt Dowle, Brian D'Urso, Lyndon Drake, Dirk #> Eddelbuettel, Claus Ekstrom, Sebastian Fischmeister, John #> Fox, Paul Gilbert, Yu Gong, Gabor Grothendieck, Frank E #> Harrell Jr, Peter M. Haverty, Torsten Hothorn, Robert King, #> Kjetil Kjernsmo, Roger Koenker, Philippe Lambert, Jan de #> Leeuw, Jim Lindsey, Patrick Lindsey, Catherine Loader, #> Gordon Maclean, Arni Magnusson, John Maindonald, David #> Meyer, Ei-ji Nakama, Jens Oehlschl\"agel, Steve Oncley, #> Richard O'Keefe, Hubert Palme, Roger D. Peng, Jose' C. #> Pinheiro, Tony Plate, Anthony Rossini, Jonathan Rougier, #> Petr Savicky, Guenther Sawitzki, Marc Schwartz, Arun #> Srinivasan, Detlef Steuer, Bill Simpson, Gordon Smyth, #> Adrian Trapletti, Terry Therneau, Rolf Turner, Bill #> Venables, Gregory R. Warnes, Andreas Weingessel, Morten #> Welinder, James Wettenhall, Simon Wood, and Achim Zeileis. #>  #> Others have written code that has been adopted by R and is #> acknowledged in the code files, including #>  #> J. D. Beasley, David J. Best, Richard Brent, Kevin Buhr, #> Michael A. Covington, Bill Cleveland, Robert Cleveland,, G. #> W. Cran, C. G. Ding, Ulrich Drepper, Paul Eggert, J. O. #> Evans, David M. Gay, H. Frick, G. W. Hill, Richard H. #> Jones, Eric Grosse, Shelby Haberman, Bruno Haible, John #> Hartigan, Andrew Harvey, Trevor Hastie, Min Long Lam, #> George Marsaglia, K. J. Martin, Gordon Matzigkeit, C. R. #> Mckenzie, Jean McRae, Cyrus Mehta, Fionn Murtagh, John C. #> Nash, Finbarr O'Sullivan, R. E. Odeh, William Patefield, #> Nitin Patel, Alan Richardson, D. E. Roberts, Patrick #> Royston, Russell Lenth, Ming-Jen Shyu, Richard C. #> Singleton, S. G. Springer, Supoj Sutanthavibul, Irma #> Terpenning, G. E. Thomas, Rob Tibshirani, Wai Wan Tsang, #> Berwin Turlach, Gary V. Vaughan, Michael Wichura, Jingbo #> Wang, M. A. Wong, and the Free Software Foundation (for #> autoconf code and utilities). See also files under #> src/extras. #>  #> Many more, too numerous to mention here, have contributed #> by sending bug reports and suggesting various improvements. #>  #> Simon Davies whilst at the University of Auckland wrote the #> original version of glm(). #>  #> Julian Harris and Wing Kwong (Tiki) Wan whilst at the #> University of Auckland assisted Ross Ihaka with the #> original Macintosh port. #>  #> R was inspired by the S environment which has been #> principally developed by John Chambers, with substantial #> input from Douglas Bates, Rick Becker, Bill Cleveland, #> Trevor Hastie, Daryl Pregibon and Allan Wilks. #>  #> A special debt is owed to John Chambers who has graciously #> contributed advice and encouragement in the early days of R #> and later became a member of the core team. #>  #> Stefano Iacus (up to 2014, a former member of R Core) and #> Simon Urbanek developed the macOS port, including the R.app #> GUI, toolchains and packaging. #>  #> The Windows port was originally developed by Guido #> Masarotto (for a while a member of R Core) and Brian #> Ripley, then further by Duncan Murdoch (a former member of #> R Core) and then Jeroen Ooms (base) and Uwe Ligges #> (packages).  Tomas Kalibera is the current main developer #> of the Windows port and provides assistance with package #> porting. #>  #> Tomas Kalibera's work has been sponsored by Jan Vitek and #> funded by his European Research Council grant \"Evolving #> Language Ecosystems (ELE)\". #>  #> Computing support (including hardware, hosting and #> infrastructure) has been provided/funded by the R #> Foundation, employers of R-Core members (notably WU Wien, #> ETH Zurich, U Oxford and U Iowa) and by Northeastern #> University and the University of Kent. #>  #> Distributions of R contain the recommended packages, whose #> authors/contributors are listed in their DESCRIPTION files. writeLines(str_wrap(text, min_width = 60, indent = 5)) #>      R would not be what it is today without the invaluable #> help of these people outside of the (former and current) R #> Core team, who contributed by donating code, bug fixes and #> documentation: #>  #>      Valerio Aimale, Suharto Anggono, Thomas Baier, Gabe #> Becker, Henrik Bengtsson, Roger Bivand, Ben Bolker, David #> Brahm, G\"oran Brostr\"om, Patrick Burns, Vince Carey, Saikat #> DebRoy, Matt Dowle, Brian D'Urso, Lyndon Drake, Dirk #> Eddelbuettel, Claus Ekstrom, Sebastian Fischmeister, John #> Fox, Paul Gilbert, Yu Gong, Gabor Grothendieck, Frank E #> Harrell Jr, Peter M. Haverty, Torsten Hothorn, Robert King, #> Kjetil Kjernsmo, Roger Koenker, Philippe Lambert, Jan de #> Leeuw, Jim Lindsey, Patrick Lindsey, Catherine Loader, #> Gordon Maclean, Arni Magnusson, John Maindonald, David #> Meyer, Ei-ji Nakama, Jens Oehlschl\"agel, Steve Oncley, #> Richard O'Keefe, Hubert Palme, Roger D. Peng, Jose' C. #> Pinheiro, Tony Plate, Anthony Rossini, Jonathan Rougier, #> Petr Savicky, Guenther Sawitzki, Marc Schwartz, Arun #> Srinivasan, Detlef Steuer, Bill Simpson, Gordon Smyth, #> Adrian Trapletti, Terry Therneau, Rolf Turner, Bill #> Venables, Gregory R. Warnes, Andreas Weingessel, Morten #> Welinder, James Wettenhall, Simon Wood, and Achim Zeileis. #>  #>      Others have written code that has been adopted by R #> and is acknowledged in the code files, including #>  #>      J. D. Beasley, David J. Best, Richard Brent, Kevin #> Buhr, Michael A. Covington, Bill Cleveland, Robert #> Cleveland,, G. W. Cran, C. G. Ding, Ulrich Drepper, Paul #> Eggert, J. O. Evans, David M. Gay, H. Frick, G. W. Hill, #> Richard H. Jones, Eric Grosse, Shelby Haberman, Bruno #> Haible, John Hartigan, Andrew Harvey, Trevor Hastie, Min #> Long Lam, George Marsaglia, K. J. Martin, Gordon #> Matzigkeit, C. R. Mckenzie, Jean McRae, Cyrus Mehta, Fionn #> Murtagh, John C. Nash, Finbarr O'Sullivan, R. E. Odeh, #> William Patefield, Nitin Patel, Alan Richardson, D. E. #> Roberts, Patrick Royston, Russell Lenth, Ming-Jen Shyu, #> Richard C. Singleton, S. G. Springer, Supoj Sutanthavibul, #> Irma Terpenning, G. E. Thomas, Rob Tibshirani, Wai Wan #> Tsang, Berwin Turlach, Gary V. Vaughan, Michael Wichura, #> Jingbo Wang, M. A. Wong, and the Free Software Foundation #> (for autoconf code and utilities). See also files under #> src/extras. #>  #>      Many more, too numerous to mention here, have #> contributed by sending bug reports and suggesting various #> improvements. #>  #>      Simon Davies whilst at the University of Auckland #> wrote the original version of glm(). #>  #>      Julian Harris and Wing Kwong (Tiki) Wan whilst at the #> University of Auckland assisted Ross Ihaka with the #> original Macintosh port. #>  #>      R was inspired by the S environment which has been #> principally developed by John Chambers, with substantial #> input from Douglas Bates, Rick Becker, Bill Cleveland, #> Trevor Hastie, Daryl Pregibon and Allan Wilks. #>  #>      A special debt is owed to John Chambers who has #> graciously contributed advice and encouragement in the #> early days of R and later became a member of the core team. #>  #>      Stefano Iacus (up to 2014, a former member of R Core) #> and Simon Urbanek developed the macOS port, including the #> R.app GUI, toolchains and packaging. #>  #>      The Windows port was originally developed by Guido #> Masarotto (for a while a member of R Core) and Brian #> Ripley, then further by Duncan Murdoch (a former member of #> R Core) and then Jeroen Ooms (base) and Uwe Ligges #> (packages).  Tomas Kalibera is the current main developer #> of the Windows port and provides assistance with package #> porting. #>  #>      Tomas Kalibera's work has been sponsored by Jan Vitek #> and funded by his European Research Council grant \"Evolving #> Language Ecosystems (ELE)\". #>  #>      Computing support (including hardware, hosting and #> infrastructure) has been provided/funded by the R #> Foundation, employers of R-Core members (notably WU Wien, #> ETH Zurich, U Oxford and U Iowa) and by Northeastern #> University and the University of Kent. #>  #>      Distributions of R contain the recommended packages, #> whose authors/contributors are listed in their DESCRIPTION #> files. writeLines(str_wrap(text, min_width = 60, exdent = 5)) #> R would not be what it is today without the invaluable help #>      of these people outside of the (former and current) R #>      Core team, who contributed by donating code, bug fixes #>      and documentation: #>  #> Valerio Aimale, Suharto Anggono, Thomas Baier, Gabe Becker, #>      Henrik Bengtsson, Roger Bivand, Ben Bolker, David #>      Brahm, G\"oran Brostr\"om, Patrick Burns, Vince Carey, #>      Saikat DebRoy, Matt Dowle, Brian D'Urso, Lyndon Drake, #>      Dirk Eddelbuettel, Claus Ekstrom, Sebastian #>      Fischmeister, John Fox, Paul Gilbert, Yu Gong, Gabor #>      Grothendieck, Frank E Harrell Jr, Peter M. Haverty, #>      Torsten Hothorn, Robert King, Kjetil Kjernsmo, Roger #>      Koenker, Philippe Lambert, Jan de Leeuw, Jim Lindsey, #>      Patrick Lindsey, Catherine Loader, Gordon Maclean, #>      Arni Magnusson, John Maindonald, David Meyer, Ei-ji #>      Nakama, Jens Oehlschl\"agel, Steve Oncley, Richard #>      O'Keefe, Hubert Palme, Roger D. Peng, Jose' C. #>      Pinheiro, Tony Plate, Anthony Rossini, Jonathan #>      Rougier, Petr Savicky, Guenther Sawitzki, Marc #>      Schwartz, Arun Srinivasan, Detlef Steuer, Bill #>      Simpson, Gordon Smyth, Adrian Trapletti, Terry #>      Therneau, Rolf Turner, Bill Venables, Gregory R. #>      Warnes, Andreas Weingessel, Morten Welinder, James #>      Wettenhall, Simon Wood, and Achim Zeileis. #>  #> Others have written code that has been adopted by R and is #>      acknowledged in the code files, including #>  #> J. D. Beasley, David J. Best, Richard Brent, Kevin Buhr, #>      Michael A. Covington, Bill Cleveland, Robert #>      Cleveland,, G. W. Cran, C. G. Ding, Ulrich Drepper, #>      Paul Eggert, J. O. Evans, David M. Gay, H. Frick, G. #>      W. Hill, Richard H. Jones, Eric Grosse, Shelby #>      Haberman, Bruno Haible, John Hartigan, Andrew Harvey, #>      Trevor Hastie, Min Long Lam, George Marsaglia, K. J. #>      Martin, Gordon Matzigkeit, C. R. Mckenzie, Jean McRae, #>      Cyrus Mehta, Fionn Murtagh, John C. Nash, Finbarr #>      O'Sullivan, R. E. Odeh, William Patefield, Nitin #>      Patel, Alan Richardson, D. E. Roberts, Patrick #>      Royston, Russell Lenth, Ming-Jen Shyu, Richard C. #>      Singleton, S. G. Springer, Supoj Sutanthavibul, Irma #>      Terpenning, G. E. Thomas, Rob Tibshirani, Wai Wan #>      Tsang, Berwin Turlach, Gary V. Vaughan, Michael #>      Wichura, Jingbo Wang, M. A. Wong, and the Free #>      Software Foundation (for autoconf code and utilities). #>      See also files under src/extras. #>  #> Many more, too numerous to mention here, have contributed #>      by sending bug reports and suggesting various #>      improvements. #>  #> Simon Davies whilst at the University of Auckland wrote the #>      original version of glm(). #>  #> Julian Harris and Wing Kwong (Tiki) Wan whilst at the #>      University of Auckland assisted Ross Ihaka with the #>      original Macintosh port. #>  #> R was inspired by the S environment which has been #>      principally developed by John Chambers, with #>      substantial input from Douglas Bates, Rick Becker, #>      Bill Cleveland, Trevor Hastie, Daryl Pregibon and #>      Allan Wilks. #>  #> A special debt is owed to John Chambers who has graciously #>      contributed advice and encouragement in the early days #>      of R and later became a member of the core team. #>  #> Stefano Iacus (up to 2014, a former member of R Core) and #>      Simon Urbanek developed the macOS port, including the #>      R.app GUI, toolchains and packaging. #>  #> The Windows port was originally developed by Guido #>      Masarotto (for a while a member of R Core) and Brian #>      Ripley, then further by Duncan Murdoch (a former #>      member of R Core) and then Jeroen Ooms (base) and Uwe #>      Ligges (packages).  Tomas Kalibera is the current main #>      developer of the Windows port and provides assistance #>      with package porting. #>  #> Tomas Kalibera's work has been sponsored by Jan Vitek and #>      funded by his European Research Council grant #>      \"Evolving Language Ecosystems (ELE)\". #>  #> Computing support (including hardware, hosting and #>      infrastructure) has been provided/funded by the R #>      Foundation, employers of R-Core members (notably WU #>      Wien, ETH Zurich, U Oxford and U Iowa) and by #>      Northeastern University and the University of Kent. #>  #> Distributions of R contain the recommended packages, whose #>      authors/contributors are listed in their DESCRIPTION #>      files. writeLines(str_wrap(text, min_width = 60, prefix = \"> \")) #> > R would not be what it is today without the invaluable #> > help of these people outside of the (former and current) #> > R Core team, who contributed by donating code, bug fixes #> > and documentation: #> >  #> > Valerio Aimale, Suharto Anggono, Thomas Baier, Gabe #> > Becker, Henrik Bengtsson, Roger Bivand, Ben Bolker, David #> > Brahm, G\"oran Brostr\"om, Patrick Burns, Vince Carey, #> > Saikat DebRoy, Matt Dowle, Brian D'Urso, Lyndon Drake, #> > Dirk Eddelbuettel, Claus Ekstrom, Sebastian Fischmeister, #> > John Fox, Paul Gilbert, Yu Gong, Gabor Grothendieck, #> > Frank E Harrell Jr, Peter M. Haverty, Torsten Hothorn, #> > Robert King, Kjetil Kjernsmo, Roger Koenker, Philippe #> > Lambert, Jan de Leeuw, Jim Lindsey, Patrick Lindsey, #> > Catherine Loader, Gordon Maclean, Arni Magnusson, John #> > Maindonald, David Meyer, Ei-ji Nakama, Jens #> > Oehlschl\"agel, Steve Oncley, Richard O'Keefe, Hubert #> > Palme, Roger D. Peng, Jose' C. Pinheiro, Tony Plate, #> > Anthony Rossini, Jonathan Rougier, Petr Savicky, Guenther #> > Sawitzki, Marc Schwartz, Arun Srinivasan, Detlef Steuer, #> > Bill Simpson, Gordon Smyth, Adrian Trapletti, Terry #> > Therneau, Rolf Turner, Bill Venables, Gregory R. Warnes, #> > Andreas Weingessel, Morten Welinder, James Wettenhall, #> > Simon Wood, and Achim Zeileis. #> >  #> > Others have written code that has been adopted by R and #> > is acknowledged in the code files, including #> >  #> > J. D. Beasley, David J. Best, Richard Brent, Kevin Buhr, #> > Michael A. Covington, Bill Cleveland, Robert Cleveland,, #> > G. W. Cran, C. G. Ding, Ulrich Drepper, Paul Eggert, J. #> > O. Evans, David M. Gay, H. Frick, G. W. Hill, Richard H. #> > Jones, Eric Grosse, Shelby Haberman, Bruno Haible, John #> > Hartigan, Andrew Harvey, Trevor Hastie, Min Long Lam, #> > George Marsaglia, K. J. Martin, Gordon Matzigkeit, C. R. #> > Mckenzie, Jean McRae, Cyrus Mehta, Fionn Murtagh, John C. #> > Nash, Finbarr O'Sullivan, R. E. Odeh, William Patefield, #> > Nitin Patel, Alan Richardson, D. E. Roberts, Patrick #> > Royston, Russell Lenth, Ming-Jen Shyu, Richard C. #> > Singleton, S. G. Springer, Supoj Sutanthavibul, Irma #> > Terpenning, G. E. Thomas, Rob Tibshirani, Wai Wan Tsang, #> > Berwin Turlach, Gary V. Vaughan, Michael Wichura, Jingbo #> > Wang, M. A. Wong, and the Free Software Foundation (for #> > autoconf code and utilities). See also files under #> > src/extras. #> >  #> > Many more, too numerous to mention here, have contributed #> > by sending bug reports and suggesting various #> > improvements. #> >  #> > Simon Davies whilst at the University of Auckland wrote #> > the original version of glm(). #> >  #> > Julian Harris and Wing Kwong (Tiki) Wan whilst at the #> > University of Auckland assisted Ross Ihaka with the #> > original Macintosh port. #> >  #> > R was inspired by the S environment which has been #> > principally developed by John Chambers, with substantial #> > input from Douglas Bates, Rick Becker, Bill Cleveland, #> > Trevor Hastie, Daryl Pregibon and Allan Wilks. #> >  #> > A special debt is owed to John Chambers who has #> > graciously contributed advice and encouragement in the #> > early days of R and later became a member of the core #> > team. #> >  #> > Stefano Iacus (up to 2014, a former member of R Core) and #> > Simon Urbanek developed the macOS port, including the #> > R.app GUI, toolchains and packaging. #> >  #> > The Windows port was originally developed by Guido #> > Masarotto (for a while a member of R Core) and Brian #> > Ripley, then further by Duncan Murdoch (a former member #> > of R Core) and then Jeroen Ooms (base) and Uwe Ligges #> > (packages).  Tomas Kalibera is the current main developer #> > of the Windows port and provides assistance with package #> > porting. #> >  #> > Tomas Kalibera's work has been sponsored by Jan Vitek and #> > funded by his European Research Council grant \"Evolving #> > Language Ecosystems (ELE)\". #> >  #> > Computing support (including hardware, hosting and #> > infrastructure) has been provided/funded by the R #> > Foundation, employers of R-Core members (notably WU Wien, #> > ETH Zurich, U Oxford and U Iowa) and by Northeastern #> > University and the University of Kent. #> >  #> > Distributions of R contain the recommended packages, #> > whose authors/contributors are listed in their #> > DESCRIPTION files."}]
